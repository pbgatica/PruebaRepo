<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="4/19/2022 5:10:20 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DESKTOP-E4HKC1F"
  DTS:CreatorName="DESKTOP-E4HKC1F\MFribla"
  DTS:DTSID="{26AFCA73-F272-44BA-87A9-8245490161DE}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.170"
  DTS:LocaleID="13322"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="31"
  DTS:VersionGUID="{F9862C82-A081-420F-9E35-513FE643C0B3}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DESKTOP-E4HKC1F\SQLEXPRESS.TOPAZ1]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{D0203379-C96A-4E8D-86C9-A29D96BAC44C}"
      DTS:ObjectName="DESKTOP-E4HKC1F\SQLEXPRESS.TOPAZ1">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=DESKTOP-E4HKC1F\SQLEXPRESS;Initial Catalog=TOPAZ;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{83A267C5-2F18-46CF-B792-5E1CCC24303C}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="ListaSP">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\s_extract_data"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{33DE0575-CE6F-41B4-B01B-4569451774C8}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="s_extract_data">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\s_extract_data\sql_extract_Topaz"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="SQL Extracción de Datos desde TOPAZ"
          DTS:DTSID="{384D8DEF-0B96-4E58-B845-182CE56B50FD}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="sql_extract_Topaz"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2019; © 2019 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{D0203379-C96A-4E8D-86C9-A29D96BAC44C}"
              SQLTask:SqlStatementSource="select 11234 as BGA_DocumentNumber__c, 19999 as BGA_Tipo_de_Documento__c&#xA;union&#xA;select 21234 as BGA_DocumentNumber__c, 29999 as BGA_Tipo_de_Documento__c&#xA;union&#xA;select 31234 as BGA_DocumentNumber__c, 39999 as BGA_Tipo_de_Documento__c&#xA;union&#xA;select 41234 as BGA_DocumentNumber__c, 49999 as BGA_Tipo_de_Documento__c"
              SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::ListaSP" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\s_script_SalesForce"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{6EBCA2E9-E21E-4777-9F60-D36C33AF13EB}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="s_script_SalesForce">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\s_script_SalesForce\ApiBulk_Sqlesforce_template"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Tarea Script"
          DTS:DTSID="{C5C2AFAD-542D-4D7D-9325-63573A6FA21C}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="ApiBulk_Sqlesforce_template"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_416aefb5139440e3bdf007779baa7cf5"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="$Project::SF_CLIENT_ID,$Project::SF_CLIENT_SECRET,$Project::SF_PASSWORD,$Project::SF_URL,$Project::SF_USERNAME,$Project::PATH_DLL"
              ReadWriteVariables="User::ListaSP">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="packages.config"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="RestSharp" version="105.2.3" targetFramework="net47" />
</packages>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_416aefb5139440e3bdf007779baa7cf5.Properties.Settings.get_Default():ST_416aefb5139440e3bdf007779baa7cf5.Properties.Sett" +
    "ings")]

namespace ST_416aefb5139440e3bdf007779baa7cf5.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_416aefb5139440e3bdf007779baa7cf5</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_416aefb5139440e3bdf007779baa7cf5</msb:DisplayName>
    <msb:ProjectId>{614FBF02-F115-4287-8B2F-8BF0523A27C8}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_416aefb5139440e3bdf007779baa7cf5.csproj" />
    <msb:File Include="Entidades\Account.cs" />
    <msb:File Include="Entidades\RequestPostCerrarJob.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="Entidades\RequestPostJob.cs" />
    <msb:File Include="Entidades\ResponsePostBatch.cs" />
    <msb:File Include="Entidades\ResponseEstadoBatch.cs" />
    <msb:File Include="Entidades\ResponseLogin.cs" />
    <msb:File Include="Entidades\ResponsetPostJob.cs" />
    <msb:File Include="Entidades\ResponseResultadoBatch.cs" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="packages.config" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="RestConnection.cs" />
    <msb:File Include="RestException.cs" />
    <msb:File Include="RestSalesforce.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Entidades\RequestPostJob.cs"
                Encoding="UTF8"><![CDATA[using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ST_416aefb5139440e3bdf007779baa7cf5.Entidades
{
    public partial class RequestPostJob
    {
        [JsonProperty("operation")]
        public string Operation { get; set; }

        [JsonProperty("object")]
        public string Object { get; set; }

        [JsonProperty("externalIdFieldName")]
        public string externalIdFieldName { get; set; }

        [JsonProperty("contentType")]
        public string ContentType { get; set; }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ST_416aefb5139440e3bdf007779baa7cf5.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{BCC89B07-E710-4499-82F1-77967FC01AF3}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_416aefb5139440e3bdf007779baa7cf5</RootNamespace>
    <AssemblyName>ST_416aefb5139440e3bdf007779baa7cf5</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\ETL\DLL\RestSharp\Newtonsoft.Json.dll</HintPath>
    </Reference>
    <Reference Include="RestSharp">
      <HintPath>C:\ETL\DLL\RestSharp\RestSharp.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Entidades\Account.cs" />
    <Compile Include="Entidades\RequestPostCerrarJob.cs" />
    <Compile Include="Entidades\RequestPostJob.cs" />
    <Compile Include="Entidades\ResponseEstadoBatch.cs" />
    <Compile Include="Entidades\ResponseLogin.cs" />
    <Compile Include="Entidades\ResponsePostBatch.cs" />
    <Compile Include="Entidades\ResponseResultadoBatch.cs" />
    <Compile Include="Entidades\ResponsetPostJob.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="packages.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="RestConnection.cs" />
    <Compile Include="RestException.cs" />
    <Compile Include="RestSalesforce.cs" />
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup />
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_416aefb5139440e3bdf007779baa7cf5")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_416aefb5139440e3bdf007779baa7cf5")]
[assembly: AssemblyCopyright("Copyright @  2022")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Runtime.Serialization;
using System.IO;
using System.Collections.Generic;
using ST_416aefb5139440e3bdf007779baa7cf5.Entidades;
using System.Data.OleDb;
#endregion

namespace ST_416aefb5139440e3bdf007779baa7cf5
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>


    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>

        private string access_token = string.Empty;
        private string instance_url = string.Empty;
        private string jobId = string.Empty;
        private string batchId = string.Empty;
        private string pathDll = string.Empty;
        private List<Account> listaCuentas;

        public void Main()
		{
            // TODO: Add your code here

            pathDll = (string)Dts.Variables[@"$Project::PATH_DLL"].Value;
            {
                AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CurrentDomain_AssemblyResolve);
            }
            System.Reflection.Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)
            {
                if (args.Name.Contains("RestSharp"))
                {
                    string path = pathDll;
                    return System.Reflection.Assembly.LoadFile(System.IO.Path.Combine(path, "RestSharp.dll"));
                }
                // further dll to reference
                if (args.Name.Contains("Newtonsoft.Json"))
                {
                    string path = pathDll;
                    return System.Reflection.Assembly.LoadFile(System.IO.Path.Combine(path, "Newtonsoft.Json.dll"));
                }
                // end further dll
                return null;
            }
            //
            try
            {
                // Crea el Login. Recupera Token y Url Salesforce.
                Login();

                // Crea el Job Batch en Saleforce. Recupera el ID del Job Batch.
                PostCreateJob();

                // Cargar el Job Batch con datos con la info a enviar.
                PostBatch();

                // Cerrar el ID del Job Batch para su ejecucion.
                PostCerrarJob();

                using (StreamWriter writer = new StreamWriter("C:\\ETL\\log.log"))
                {
                    writer.WriteLine(access_token);
                    writer.WriteLine(instance_url);
                    writer.WriteLine(jobId);
                    
                }
                if (listaCuentas.Count > 0)
                {
                    GetEstadoBatch();

                    GetResultadoBatch(listaCuentas);

                }
                GetEstadoBatch();

                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (RestException ex)
            {
                Dts.TaskResult = (int)ScriptResults.Failure;
            }

		}

        private void Login()
        {
            try
            {
                RestSalesforce rsf = new RestSalesforce();
                rsf.ClientId = (string)Dts.Variables["$Project::SF_CLIENT_ID"].Value;
                rsf.ClientSecret = (string)Dts.Variables["$Project::SF_CLIENT_SECRET"].Value;
                rsf.Username = (string)Dts.Variables["$Project::SF_USERNAME"].Value;
                rsf.Password = (string)Dts.Variables["$Project::SF_PASSWORD"].GetSensitiveValue();
                string url = (string)Dts.Variables["$Project::SF_URL"].Value;
                var responseLogin = rsf.Login(url);
                access_token = responseLogin.AccessToken;
                instance_url = responseLogin.InstanceUrl;

            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script Task Example", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private void PostCreateJob()
        {
            RestSalesforce rsf = new RestSalesforce();
            RequestPostJob r = new RequestPostJob();
            ResponseLogin res = new ResponseLogin();

            try
            {
                r.Operation = "upsert";
                r.Object = "Account";
                r.externalIdFieldName = "BGA_DocumentNumber__c";
                r.ContentType = "JSON";
                res.AccessToken = access_token;
                res.InstanceUrl = instance_url;
                var responsePostJob = rsf.PostJob(r, res);
                jobId = responsePostJob.Id;
            }
            catch (RestException ex)
            {
                throw ex;
            }
        }

        private void PostBatch()
        {
            RestSalesforce rsf = new RestSalesforce();
            Account cuenta = null;
            ResponseLogin res = new ResponseLogin();
            listaCuentas = new List<Account>();
            try
            {
                DataTable dt = new DataTable();
                OleDbDataAdapter adapter = new OleDbDataAdapter();
                adapter.Fill(dt, Dts.Variables["User::ListaSP"].Value);
                using (StreamWriter writer = new StreamWriter("C:\\ETL\\tupla.txt"))
                {
                    writer.WriteLine("pase 1..");

                    foreach (DataRow row in dt.Rows)
                    {
                        cuenta = new Account();
                        object[] array = row.ItemArray;

                        //array[ <n> ] => Corresponde la posición del campo en la Row, partiendo desde 0.
                        writer.Write(String.IsNullOrEmpty(Convert.ToString(array[0])) ? null : Convert.ToString(array[0]));
                        writer.WriteLine("," + (String.IsNullOrEmpty(Convert.ToString(array[1])) ? null : Convert.ToString(array[1])));

                        // "cuenta" es una class que corresponde y representa a una Entidad Saleforce con sus campos JSON.
                        // Esta Class debe ser distinta dependiendo de la entidad a cargar.
                        cuenta.BGA_DocumentNumber__c = String.IsNullOrEmpty(Convert.ToString(array[0])) ? null : Convert.ToString(array[0]);
                        cuenta.BGA_Tipo_de_Documento__c = String.IsNullOrEmpty(Convert.ToString(array[1])) ? null : Convert.ToString(array[1]);

                        // Se crea una lista de la Class Saleforce, que seria la carga masiva a envia.
                        listaCuentas.Add(cuenta);
                    }
                    res.AccessToken = access_token;
                    res.InstanceUrl = instance_url;
                    var response = rsf.PostBatch(listaCuentas, res, jobId);
                    batchId = response.Id;
                    writer.WriteLine("Batch ID: " + batchId.ToString());
                }

            }
            catch (RestException ex)
            {
                throw ex;
            }
        }

        private void PostCerrarJob()
        {
            RestSalesforce rsf = new RestSalesforce();
            RequestPostCerrarJob req = new RequestPostCerrarJob();
            ResponseLogin res = new ResponseLogin();

            try
            {
                req.State = "Closed";
                res.AccessToken = access_token;
                res.InstanceUrl = instance_url;

                var response = rsf.PostCerrarJob(req, res, jobId);
            }
            catch (RestException ex)
            {
                throw ex;
            }
        }

        private void GetEstadoBatch()
        {
            RestSalesforce rsf = new RestSalesforce();
            ResponseLogin res = new ResponseLogin();

            string state = string.Empty;
            string stateMessage = string.Empty;
            try
            {
                res.AccessToken = access_token;
                res.InstanceUrl = instance_url;

                for (; ; )
                {
                    System.Threading.Thread.Sleep(10000);
                    var response = rsf.GetEstadoBatch(res, jobId, batchId);
                    state = response.State;
                    stateMessage = response.StateMessage;
                    if (state == "Failed" || state == "Not Processed")
                        throw new RestException("Error al procesar batch");

                    if (state == "Completed")
                        break;
                }
            }
            catch (RestException ex)
            {
                throw ex;
            }
        }
        //
        private void GetResultadoBatch(List<Account> listaCuentas)
        {
            RestSalesforce rsf = new RestSalesforce();
            ResponseLogin res = new ResponseLogin();

            try
            {
                res.AccessToken = access_token;
                res.InstanceUrl = instance_url;

                var response = rsf.GetResultadoBatch(res, jobId, batchId);
                using (StreamWriter writer = new StreamWriter("C:\\ETL\\Resul.txt"))
                {
                    foreach (ResponseResultadoBatch row in response)
                    {
                        writer.WriteLine("Id      : " + row.Id);
                        writer.WriteLine("Success : " + row.Success);
                        writer.WriteLine("Created : " + row.Created);
                        writer.WriteLine("Error   : " + row.Errors[0].Message);
                        writer.WriteLine("------");
                    }
                }
            }
            catch (RestException ex)
            {
                throw ex;
            }
        }
        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };

   
        #endregion

    }
}]]></ProjectItem>
              <ProjectItem
                Name="Entidades\ResponsetPostJob.cs"
                Encoding="UTF8"><![CDATA[using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ST_416aefb5139440e3bdf007779baa7cf5.Entidades
{
    public partial class ResponsetPostJob
    {
        [JsonProperty("apexProcessingTime")]
        public long ApexProcessingTime { get; set; }

        [JsonProperty("apiActiveProcessingTime")]
        public long ApiActiveProcessingTime { get; set; }

        [JsonProperty("apiVersion")]
        public long ApiVersion { get; set; }

        [JsonProperty("assignmentRuleId")]
        public object AssignmentRuleId { get; set; }

        [JsonProperty("concurrencyMode")]
        public string ConcurrencyMode { get; set; }

        [JsonProperty("contentType")]
        public string ContentType { get; set; }

        [JsonProperty("createdById")]
        public string CreatedById { get; set; }

        [JsonProperty("createdDate")]
        public string CreatedDate { get; set; }

        [JsonProperty("externalIdFieldName")]
        public object ExternalIdFieldName { get; set; }

        [JsonProperty("fastPathEnabled")]
        public bool FastPathEnabled { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("numberBatchesCompleted")]
        public long NumberBatchesCompleted { get; set; }

        [JsonProperty("numberBatchesFailed")]
        public long NumberBatchesFailed { get; set; }

        [JsonProperty("numberBatchesInProgress")]
        public long NumberBatchesInProgress { get; set; }

        [JsonProperty("numberBatchesQueued")]
        public long NumberBatchesQueued { get; set; }

        [JsonProperty("numberBatchesTotal")]
        public long NumberBatchesTotal { get; set; }

        [JsonProperty("numberRecordsFailed")]
        public long NumberRecordsFailed { get; set; }

        [JsonProperty("numberRecordsProcessed")]
        public long NumberRecordsProcessed { get; set; }

        [JsonProperty("numberRetries")]
        public long NumberRetries { get; set; }

        [JsonProperty("object")]
        public string Object { get; set; }

        [JsonProperty("operation")]
        public string Operation { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("systemModstamp")]
        public string SystemModstamp { get; set; }

        [JsonProperty("totalProcessingTime")]
        public long TotalProcessingTime { get; set; }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Entidades\RequestPostCerrarJob.cs"
                Encoding="UTF8"><![CDATA[using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ST_416aefb5139440e3bdf007779baa7cf5.Entidades
{
    public partial class RequestPostCerrarJob
    {
        [JsonProperty("state")]
        public string State { get; set; }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Entidades\Account.cs"
                Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace ST_416aefb5139440e3bdf007779baa7cf5.Entidades
{
    public partial class Account
    {
        [JsonProperty("BGA_DocumentNumber__c")]
        public string BGA_DocumentNumber__c { get; set; }

        [JsonProperty("BGA_Tipo_de_Documento__c")]
        public string BGA_Tipo_de_Documento__c { get; set; }

    }
}]]></ProjectItem>
              <ProjectItem
                Name="Entidades\ResponsePostBatch.cs"
                Encoding="UTF8"><![CDATA[using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ST_416aefb5139440e3bdf007779baa7cf5.Entidades
{
    public partial class ResponsePostBatch
    {
        [JsonProperty("apexProcessingTime")]
        public long ApexProcessingTime { get; set; }

        [JsonProperty("apiActiveProcessingTime")]
        public long ApiActiveProcessingTime { get; set; }

        [JsonProperty("createdDate")]
        public string CreatedDate { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("jobId")]
        public string JobId { get; set; }

        [JsonProperty("numberRecordsFailed")]
        public long NumberRecordsFailed { get; set; }

        [JsonProperty("numberRecordsProcessed")]
        public long NumberRecordsProcessed { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("stateMessage")]
        public object StateMessage { get; set; }

        [JsonProperty("systemModstamp")]
        public string SystemModstamp { get; set; }

        [JsonProperty("totalProcessingTime")]
        public long TotalProcessingTime { get; set; }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="RestSalesforce.cs"
                Encoding="UTF8"><![CDATA[using Newtonsoft.Json;
using RestSharp;
using ST_416aefb5139440e3bdf007779baa7cf5.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ST_416aefb5139440e3bdf007779baa7cf5
{
    public class RestSalesforce : RestConnection
    {
        public string ClientId { get; set; }
        public string ClientSecret { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }

        // Captura la respuesta del Login o Session en Salesforce.
        public ResponseLogin Login(string URL)
        {
            try
            {

                this.Cliente.BaseUrl = new Uri(URL);

                this.Request = new RestSharp.RestRequest("/services/oauth2/token?grant_type=password&client_id=" + ClientId + "&client_secret=" + ClientSecret + "&username=" + Username + "&password=" + Password);

                var content = this.ConexionPost();

                ResponseLogin sr = JsonConvert.DeserializeObject<ResponseLogin>(content);
                return sr;
            }
            catch (RestException ex)
            {
                throw ex;
            }
        }
        // Captura Respuesta de creación del Job Batch en Saleforce
        public ResponsetPostJob PostJob(RequestPostJob request, ResponseLogin login)
        {
            try
            {
                this.Cliente.BaseUrl = new Uri(login.InstanceUrl);
                this.Request = new RestSharp.RestRequest("/services/async/53.0/job");
                this.Request.AddHeader("Content-type", "application/json");
                this.Request.AddHeader("X-SFDC-Session", "Bearer " + login.AccessToken);

                string json = JsonConvert.SerializeObject(request, Formatting.Indented);
                this.Request.AddParameter("application/json", json, ParameterType.RequestBody);

                var content = this.ConexionPost();

                ResponsetPostJob sr = JsonConvert.DeserializeObject<ResponsetPostJob>(content);


                return sr;

            }
            catch (RestException ex)
            {
                throw ex;
            }
        }
        // Captura Respuesta al Cerrar Job Batch en SalesForce
        public ResponsetPostJob PostCerrarJob(RequestPostCerrarJob request, ResponseLogin login, string jobId)
        {
            try
            {
                this.Cliente.BaseUrl = new Uri(login.InstanceUrl);
                this.Request = new RestSharp.RestRequest("/services/async/53.0/job/" + jobId);
                this.Request.AddHeader("Content-type", "application/json");
                this.Request.AddHeader("X-SFDC-Session", "Bearer " + login.AccessToken);

                string json = JsonConvert.SerializeObject(request, Formatting.Indented);
                this.Request.AddParameter("application/json", json, ParameterType.RequestBody);

                var content = this.ConexionPost();

                ResponsetPostJob sr = JsonConvert.DeserializeObject<ResponsetPostJob>(content);

                return sr;
            }
            catch (RestException ex)
            {
                throw ex;
            }
        }
        // 
        public ResponsePostBatch PostBatch(List<Account> request, ResponseLogin login, string jobId)
        {
            try
            {
                this.Cliente.BaseUrl = new Uri(login.InstanceUrl);
                this.Request = new RestSharp.RestRequest("/services/async/53.0/job/" + jobId + "/batch");
                this.Request.AddHeader("Content-type", "application/json");
                this.Request.AddHeader("X-SFDC-Session", "Bearer " + login.AccessToken);

                string json = JsonConvert.SerializeObject(request, Formatting.Indented);

                this.Request.AddParameter("application/json", json, ParameterType.RequestBody);

                var content = this.ConexionPost();

                ResponsePostBatch sr = JsonConvert.DeserializeObject<ResponsePostBatch>(content);
                return sr;
            }
            catch (RestException ex)
            {
                throw ex;
            }
        }
        //
        public List<ResponseResultadoBatch> GetResultadoBatch(ResponseLogin login, string jobId, string batchId)
        {
            try
            {
                this.Cliente.BaseUrl = new Uri(login.InstanceUrl);
                this.Request = new RestSharp.RestRequest("/services/async/53.0/job/" + jobId + "/batch/" + batchId + "/result");
                this.Request.AddHeader("Content-type", "application/json");
                this.Request.AddHeader("X-SFDC-Session", "Bearer " + login.AccessToken);

                var content = this.ConexionGet();

                List<ResponseResultadoBatch> sr = JsonConvert.DeserializeObject<List<ResponseResultadoBatch>>(content);

                return sr;
            }
            catch (RestException ex)
            {
                throw ex;
            }
        }
        //
        public ResponseEstadoBatch GetEstadoBatch(ResponseLogin login, string jobId, string batchId)
        {
            try
            {
                this.Cliente.BaseUrl = new Uri(login.InstanceUrl);
                this.Request = new RestSharp.RestRequest("/services/async/53.0/job/" + jobId + "/batch/" + batchId);
                this.Request.AddHeader("Content-type", "application/json");
                this.Request.AddHeader("X-SFDC-Session", "Bearer " + login.AccessToken);

                var content = this.ConexionGet();

                ResponseEstadoBatch sr = JsonConvert.DeserializeObject<ResponseEstadoBatch>(content);

                return sr;
            }
            catch (RestException ex)
            {
                throw ex;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Entidades\ResponseEstadoBatch.cs"
                Encoding="UTF8"><![CDATA[using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ST_416aefb5139440e3bdf007779baa7cf5.Entidades
{
    public partial class ResponseEstadoBatch
    {
        [JsonProperty("apexProcessingTime")]
        public long ApexProcessingTime { get; set; }

        [JsonProperty("apiActiveProcessingTime")]
        public long ApiActiveProcessingTime { get; set; }

        [JsonProperty("createdDate")]
        public string CreatedDate { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("jobId")]
        public string JobId { get; set; }

        [JsonProperty("numberRecordsFailed")]
        public long NumberRecordsFailed { get; set; }

        [JsonProperty("numberRecordsProcessed")]
        public long NumberRecordsProcessed { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("stateMessage")]
        public string StateMessage { get; set; }

        [JsonProperty("systemModstamp")]
        public string SystemModstamp { get; set; }

        [JsonProperty("totalProcessingTime")]
        public long TotalProcessingTime { get; set; }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Entidades\ResponseLogin.cs"
                Encoding="UTF8"><![CDATA[using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ST_416aefb5139440e3bdf007779baa7cf5.Entidades
{
    public partial class ResponseLogin
    {
        [JsonProperty("access_token")]
        public string AccessToken { get; set; }

        [JsonProperty("instance_url")]
        public string InstanceUrl { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("token_type")]
        public string TokenType { get; set; }

        [JsonProperty("issued_at")]
        public string IssuedAt { get; set; }

        [JsonProperty("signature")]
        public string Signature { get; set; }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="RestConnection.cs"
                Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using RestSharp;
using Newtonsoft.Json;
using System.Windows.Forms;

namespace ST_416aefb5139440e3bdf007779baa7cf5
{
    public abstract class RestConnection
    {
        protected string RestUser;
        protected string RestPass;
        protected string RestUrl;
        protected RestClient Cliente;
        protected RestRequest Request;

        public RestConnection()
        {
            //RestUser = ConfigurationManager.AppSettings["RestUser"];
            //RestPass = ConfigurationManager.AppSettings["RestPass"];
            //RestUrl = ConfigurationManager.AppSettings["RestUrl"];

            Cliente = new RestClient();

            //Cliente.BaseUrl = new Uri(RestUrl);
            //Cliente.Authenticator = new HttpBasicAuthenticator(RestUser, RestPass);
        }

        public string ConexionPost()
        {
            try
            {
                ServicePointManager.Expect100Continue = true;
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

                Request.Method = Method.POST;
                IRestResponse response = Cliente.Execute(Request);

                if (response.StatusCode != System.Net.HttpStatusCode.OK && response.StatusCode != System.Net.HttpStatusCode.Created)
                {
                    throw new RestException(response.ErrorMessage, response.ErrorException);
                }

                return response.Content;
            }
            catch (WebException ex)
            {
                throw ex;
            }
            catch (RestException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
        }

        public string ConexionGet()
        {
            try
            {
                ServicePointManager.Expect100Continue = true;
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

                Request.Method = Method.GET;
                IRestResponse response = Cliente.Execute(Request);

                if (response.StatusCode != System.Net.HttpStatusCode.OK && response.StatusCode != System.Net.HttpStatusCode.Created)
                {
                    throw new RestException(response.ErrorMessage, response.ErrorException);
                }

                return response.Content;
            }
            catch (System.Net.WebException ex)
            {
                throw ex;
            }
            catch (RestException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Entidades\ResponseResultadoBatch.cs"
                Encoding="UTF8"><![CDATA[using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ST_416aefb5139440e3bdf007779baa7cf5.Entidades
{
    public partial class ResponseResultadoBatch
    {
        [JsonProperty("success")]
        public bool Success { get; set; }

        [JsonProperty("created")]
        public bool Created { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("errors")]
        public Error[] Errors { get; set; }
    }

    public partial class Error
    {
        [JsonProperty("statusCode")]
        public string StatusCode { get; set; }

        [JsonProperty("message")]
        public string Message { get; set; }

        [JsonProperty("fields")]
        public string[] Fields { get; set; }
    }

}]]></ProjectItem>
              <ProjectItem
                Name="RestException.cs"
                Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ST_416aefb5139440e3bdf007779baa7cf5
{
    public class RestException : Exception
    {
        public RestException()
        {
        }

        public RestException(string message)
            : base(message)
        {
        }

        public RestException(string message, Exception inner)
            : base(message, inner)
        {
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_416aefb5139440e3bdf007779baa7cf5.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_416aefb5139440e3bdf007779baa7cf5.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_416aefb5139440e3bdf007779baa7cf5.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_416aefb5139440e3bdf007779baa7cf5.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_416aefb5139440e3bdf007779baa7cf5.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_416aefb5139440e3bdf007779baa7cf5.dll">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
lw0yEwYAJg4yEwYA4wwJEw8A1BMAAAYAEA1yEQYAeg1yEQYAWw1yEQYADQ5yEQYAtw1yEQYA0A1y
EQYAJw1yEQYAQg2/DgYAahWGEAoAxRUbEgoABxYbEgoAPgwbEgYAyRGGEA4ApRF9FQYAqwwyEwYA
LABtARIA6w1zDxIA7wtzDwYAohJkABYArQmVAAYA1RJsFAYAwAmGEFMA5BIAAAYASxZyEQYATRSG
EAYAjRCGEAYAxgwJEwYAOhJSEwYA4xFdEQ4AiAzcDw4A9wzcDw4AJgxIERoARA7TEQ4AShJ9FQ4A
RAt9FQoAtggbEgoABhYbEg4AIwl9FQ4AUA+GEAYA2w6GEBoA+hXTERoA4g7TEQoAdQsbEhIAyg9z
Dx4AOhQSCx4AtwkSCwYA3hCGEAYAXhKGEAYArxJkABIAeBJzDxYAuhKhABYAhBGVABYACwyVABYA
MRaVAAYA/hWGEAYAHAKuDgYAnhCGEAYASw9kAAYAnguGEAYAzAmGEAAAAABXAAAAAAABAAEAgQAQ
AJYRMwA1AAEAAQABABAAxREzAEUABgAEAAEAEAD2CDMACAAGAAcAAQAQANMQMwBZAAoAFgAAABAA
WRMHFDUAEAAfAAABEABEFAcUkQASACMAAQAQAPIVphM1ABMAJgABABAAygCmEzUAFQArAAEAEADw
AKYTNQAWAC4AAQAQABYPphM1ABoANwABABAA+hCmEzUAJQBOAAEAEAA5D6YTNQArAFsAAQAQAO0O
phM1ADYAcgABABAAzxKmEzUAOgB7AAEAEADfAKYTNQA9AIIAAwEAAPYUAAB5AFUAswAEAIwSHQEE
AJUUHQEEAGgQHQEEAKMMCQIEAAsWDQIBAAEEHQEBAJQIHQEBAAkGHQEBADEFHQEBAMYQHQEBAHAQ
HQEBAKoBHQEBANoBHQEBAPIPHQEBAPwSEQIRAJIQGQIRAN8LHgIRAOYIIwIBAI0DHQEBAGMDHQEB
AAUHHQEBAJYHHQEBAHwIHQEBAOQFHQEBALAGHQEBAHEGJwIBACMGJwIBAOgGHQEBALQDHQEBAMgD
HQEBAFkEJwIBAKMEJwIBAAUHHQEBAKEFHQEBALEHHQEBAEwGJwIBAF0HHQEBAEAHHQEBALQDHQEB
AJUGHQEBAGIIHQEBAM0GHQEBAHEGJwIBACMGJwIBAOgGHQEBALQDHQEBAMgDHQEBAFkEJwIBAKME
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
AgByEgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQBgAAAAAQATFgAAAgAIEQAAAQATFgAAAgAI
EQAAAwCqAQAAAQATFgAAAgAIEQAAAwCqAQAAAQAIEQAAAgCqAQAAAwDaAQAAAQAIEQAAAgCqAQAA
AwDaAQAAAQD8EgAAAQAvEgAAAgBeFAAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+
DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAA
AQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+
DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAA
AQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+
DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAA
AQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+
DgAAAQB+DgAAAQB+DgAAAQB+DgAAAQB+DgkA7xIBABEA7xIGABkA7xIKACkA7xIQADEA7xIQADkA
7xIQAEEA7xIQAEkA7xIQAFEA7xIQAFkA7xIQAGEA7xIQAJkA7xIGAKkA7xIGAPkA7xIGABkB7xIV
ACkB7xIQAGkA7xIGAHEA7xIGADEBhA4kADEBJxApAHkAsggwAHEAWg43AIEABQk/AIEAlAlFAIEA
shFJAIEA3BVFAIkAWglFAIkA7xJOAIkA7xIGAIkA7xIQAFkB7xIQAHEAXBBaAGEBMhVhAHkA7xIQ
AGkBXxVnAHkAJRJ5AGEBMhWBAGkBTxWHAHkAlRKPAGEBMhWlAGEBMhXIALEA7hTaAIEBNhTgAIkB
fRDmAJEBYg7tAJkB6BDxAKEB7xL3AJkBmg79ALkA7xIQAKkBMgsQANEATAwGAAwA6BULAYEBthUB
AJEBbA7tAIEBBBUXAYkA1whFAGEBaBYdAbEByxIgAQwA7xIGAMEA7xIGALkB7xIGALkBIhBJAcEA
DxVQAckB4RJWAckA0BXtANEBORZbAdkB2Q5gAWEBYBZlAakBnQwQAAwAIwJqAckAKBZwAWkA2Q5F
AOEB7xGFAWEBVBaKARQA4RKvARwA0BW/AekB2Q5FABwAKBZwAbEA7xIGAOkA+QlFAGEBYxTEAfEB
PAuBAOEA8AnJAfkB3gnPAfkBRxbYAQEB7xLdASEB7xIGAAgAWAH/AQgAXAEEAi4ACwACAy4AEwAL
Ay4AGwAqAy4AIwAzAy4AKwBcAy4AMwBcAy4AOwBcAy4AQwAzAy4ASwBiAy4AUwBcAy4AWwB5A6MA
awAEAqkAewAqA8EAYwAEAsMAcwAEAskAewAqA+AAYwAEAuEAYwAEAgABYwAEAgEBYwAEAgkBgwDD
AyABYwAEAiEBYwAEAikBgwDeA0ABYwAEAkkBgwD8A2ABYwAEAmkBgwAHBIABYwAEAokBgwAWBKAB
YwAEAqkBgwAiBMABYwAEAskBgwA7BOkBgwBMBAkCgwBkBCkCgwCBBEECYwAEAkkCgwCSBGECYwAE
AmkCgwCaBIECYwAEAokCgwClBKECYwAEAqkCgwC+BMECYwAEAskCgwD8A+ECYwAEAukCgwDaBAED
YwAEAgkDgwDsBCEDYwAEAikDgwAABUEDYwAEAkkDgwAZBWEDYwAEAmkDgwArBYEDYwAEAokDgwCS
BKEDYwAEAqkDgwA9BcADYwAEAsEDYwAEAskDgwBNBeEDYwAEAukDgwBcBQEEYwAEAgkEgwBMBCEE
YwAEAikEgwBkBEEEYwAEAkkEgwCBBGEEYwAEAmkEgwCSBIEEYwAEAokEgwCaBKEEYwAEAqkEgwCl
BMAEYwAEAsEEYwAEAskEgwC+BOAEYwAEAuEEYwAEAukEgwD8AwAFYwAEAgEFYwAEAgkFgwDaBCAF
YwAEAiEFYwAEAikFgwDsBEEFYwAEAkkFgwAABWAFYwAEAmEFYwAEAmkFgwBrBYAFYwAEAoEFYwAE
AokFgwB4BaEFYwAEAqkFgwCSBMAFYwAEAsEFYwAEAskFgwCFBeAFYwAEAuEFYwAEAukFgwCRBQAG
YwAEAgEGYwAEAgkGgwChBSAGYwAEAiEGYwAEAikGgwCuBUAGYwAEAkEGYwAEAkkGgwBMBGAGYwAE
AmEGYwAEAmkGgwBkBIAGYwAEAoEGYwAEAokGgwC6BaAGYwAEAqEGYwAEAqkGgwDKBcEGYwAEAskG
gwDgBeAGYwAEAuEGYwAEAukGgwA7BAAHYwAEAgEHYwAEAgkHgwD1BSAHYwAEAiEHYwAEAikHgwCB
BEAHYwAEAkEHYwAEAkkHgwAiBGAHYwAEAmEHYwAEAmkHgwAGBoAHYwAEAoEHYwAEAokHgwCSBKAH
YwAEAqEHYwAEAqkHgwAbBsAHYwAEAsEHYwAEAskHgwA3BuAHYwAEAuEHYwAEAukHgwBQBgAIYwAE
AgEIYwAEAgkIgwBtBiAIYwAEAiEIYwAEAikIgwCGBkAIYwAEAkEIYwAEAkkIgwClBGAIYwAEAmEI
YwAEAmkIgwC+BIAIYwAEAoEIYwAEAokIgwCeBqAIYwAEAqEIYwAEAqkIgwAWBMAIYwAEAsEIYwAE
AskIgwAHBOAIYwAEAuEIYwAEAukIgwD8AwAJYwAEAgEJYwAEAgkJgwDsBCAJYwAEAiEJYwAEAikJ
gwAABUAJYwAEAkEJYwAEAmAJYwAEAmEJYwAEAoAJYwAEAoEJYwAEAqEJYwAEAsAJYwAEAsEJYwAE
AuAJYwAEAuEJYwAEAgAKYwAEAgEKYwAEAiAKYwAEAiEKYwAEAkAKYwAEAkEKYwAEAmAKYwAEAmEK
YwAEAoAKYwAEAoEKYwAEAqAKYwAEAsAKYwAEAuAKYwAEAgALYwAEAiALYwAEAmALYwAEAoALYwAE
AqALYwAEAsALYwAEAuALYwAEAgAMYwAEAiAMYwAEAkAMYwAEAmAMYwAEAoAMYwAEAqAMYwAEAsAM
YwAEAuAMYwAEAgANYwAEAiANYwAEAkANYwAEAmANYwAEAoANYwAEAqANYwAEAsANYwAEAuANYwAE
AgAOYwAEAkAOYwAEAmAOYwAEAoAOYwAEAqAOYwAEAsAOYwAEAuAOYwAEAgAPYwAEAiAPYwAEAmAP
YwAEAoAPYwAEAqAPYwAEAsAPYwAEAuAPYwAEAgAQYwAEAkAQYwAEAmAQYwAEAoAQYwAEAqAQYwAE
AsAQYwAEAuAQYwAEAgARYwAEAiARYwAEAkARYwAEAmARYwAEAoARYwAEAqARYwAEAsARYwAEAuAR
YwAEAgASYwAEAiASYwAEAkASYwAEAmASYwAEAoASYwAEAqASYwAEAsASYwAEAuASYwAEAgATYwAE
AiATYwAEAkATYwAEAmATYwAEAoATYwAEAqATYwAEAsATYwAEAuATYwAEAgAUYwAEAiAUYwAEAkAU
YwAEAmAUYwAEAoAUYwAEAqAUYwAEAsAUYwAEAuAUYwAEAgAVYwAEAiAVYwAEAkAVYwAEAmAVYwAE
AoAVYwAEAqAVYwAEAsAVYwAEAuAVYwAEAgAWYwAEAiAWYwAEAhwAVQBzAJ8AsQDDANUADwEpATQB
dAF9AZABBAABAAYABQAHAAcACAAIAAkACgAKAAsACwAPAAwAGgANACAADgArAA8ALwAQADIAAADz
AdYCAACdFdYCAABzCtYCAADOCNYCAAA6EtoCAADnC+ACAACuFeYCAABXAdYCAAAgAdYCAACXDNYC
AAA+EdYCAABqFdYCAABOCtYCAACXC9YCAAD/CusCAACcCusCAABoDNYCAAAZAtYCAACkAdYCAABr
AusCAADOAusCAACXDNYCAACHCdYCAAAMEtYCAADQCusCAAC6ENYCAABQENYCAAAZAtYCAABrC9YC
AAApFdYCAAC9C9YCAAD/CusCAACcCusCAABoDNYCAAAZAtYCAACkAdYCAABrAusCAADOAusCAACX
DNYCAACHCe8CAAAMEtYCAADQCusCAACuFPMCAAD1AvMCAAAZAtYCAACOFPcCAAAnCdYCAACdCdYC
AAArE/0CAAD/CusCAACcCusCAAAhEesCAADJAe8CAABKCdYCAACXC9YCAAAQAtYCAABoDNYCAAAe
Cu8CAAA/AvMCAAAZAtYCAAAcA+sCAACbAusCAADWFOsCAABPA+sCAAC3D+sCAABrAusCAADOAusC
AAD5E+sCAABqFdYCAAA+EdYCAACXDNYCAAAMEtYCAADQCusCAgAHAAMAAQAIAAMAAgAJAAUAAQAK
AAUAAgALAAcAAQAMAAcAAgANAAkAAQAOAAkAAgAgAAsAAgAhAA0AAQAiAA0AAgAjAA8AAgAmABEA
AQAnABEAAgAoABMAAQApABMAAgArABUAAQAsABUAAgAuABcAAQAvABcAAgAwABkAAQAxABkAAgAy
ABsAAQAzABsAAgA0AB0AAQA1AB0AAgA3AB8AAQA4AB8AAgA5ACEAAQA6ACEAAgA7ACMAAQA8ACMA
AgA9ACUAAQA+ACUAAgA/ACcAAQBAACcAAgBBACkAAQBCACkAAgBDACsAAQBEACsAAgBFAC0AAQBG
AC0AAgBHAC8AAQBIAC8AAgBJADEAAQBKADEAAgBLADMAAQBMADMAAgBOADUAAQBPADUAAgBQADcA
AQBRADcAAgBSADkAAQBTADkAAgBUADsAAQBVADsAAgBWAD0AAQBXAD0AAgBYAD8AAQBZAD8AAgBb
AEEAAQBcAEEAAgBdAEMAAQBeAEMAAgBfAEUAAQBgAEUAAgBhAEcAAQBiAEcAAgBjAEkAAQBkAEkA
AgBlAEsAAQBmAEsAAgBnAE0AAQBoAE0AAgBpAE8AAQBqAE8AAgBrAFEAAQBsAFEAAgBtAFMAAQBu
AFMAAgBvAFUAAQBwAFUAAgByAFcAAQBzAFcAAgB0AFkAAQB1AFkAAgB2AFsAAQB3AFsAAgB4AF0A
AQB5AF0AAgB7AF8AAQB8AF8AAgB9AGEAAQB+AGEAAgB/AGMAAQCAAGMAAgCCAGUAAQCDAGUAAgCE
AGcAAQCFAGcAAgCGAGkAAQCHAGkAAgCIAGsAAQCJAGsAAgCKAG0AAQCLAG0AAgCMAG8AAQCNAG8A
AgCOAHEAAQCPAHEAAgCQAHMAAQCRAHMAAgCSAHUAAQCTAHUAAgCUAHcAAQCVAHcAAgCWAHkAAQCX
AHkAAgCYAHsAAQCZAHsAAgCaAH0AAQCbAH0AAgCcAH8AAQCdAH8AAgCeAIEAAQCfAIEAAgCgAIMA
AQChAIMAAgCiAIUAAQCjAIUAAgCkAIcAAQClAIcAAgCmAIkAAQCnAIkAAgCoAIsAAQCpAIsAAgCq
AI0AAQCrAI0AAgCsAI8AAQCtAI8AAgCuAJEAAQCvAJEAAgCwAJMAAQCxAJMABAGoAbgBBIAAAAEA
AADRHxZ4AAAAAAAAMwAAAAQAAAAAAAAAAAAAAOQBswAAAAAAaQACAAMAAAAAAAAAAAAbEgAAAAAE
AAAAAAAAAAAAAADkAYYQAAAAAA8AAAAAAAAAAAAAAO0BVA8AAAAABAAAAAAAAAAAAAAA5AGVAAAA
AAAMAAAAAAAAAAAAAAD2AdMRAAAAAA8AAAAAAAAAAAAAAO0BbgAAAAAAAAAAAAEAAABjEwAAEQAF
AEcAbgBHAJoARwCsAEcAugBHANAAAAAAPE1haW4+Z19fQ3VycmVudERvbWFpbl9Bc3NlbWJseVJl
c29sdmV8Nl8wAExpc3RgMQBTVF80MTZhZWZiNTEzOTQ0MGUzYmRmMDA3Nzc5YmFhN2NmNQA8TW9k
dWxlPgBVUkwAU3lzdGVtLklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9f
AFN5c3RlbS5EYXRhAFN5c3RlbS5EYXRhLk9sZURiAG1zY29ybGliAFBvc3RDcmVhdGVKb2IAUmVx
dWVzdFBvc3RDZXJyYXJKb2IAUmVzcG9uc2V0UG9zdEpvYgBSZXF1ZXN0UG9zdEpvYgBnZXRfQkdB
X1RpcG9fZGVfRG9jdW1lbnRvX19jAHNldF9CR0FfVGlwb19kZV9Eb2N1bWVudG9fX2MAZ2V0X0JH
QV9Eb2N1bWVudE51bWJlcl9fYwBzZXRfQkdBX0RvY3VtZW50TnVtYmVyX19jAFN5c3RlbS5Db2xs
ZWN0aW9ucy5HZW5lcmljAGdldF9JZABzZXRfSWQAZ2V0X0pvYklkAHNldF9Kb2JJZABqb2JJZABn
ZXRfQXNzaWdubWVudFJ1bGVJZABzZXRfQXNzaWdubWVudFJ1bGVJZABiYXRjaElkAGdldF9DbGll
bnRJZABzZXRfQ2xpZW50SWQAZ2V0X0NyZWF0ZWRCeUlkAHNldF9DcmVhdGVkQnlJZABUaHJlYWQA
QWRkAGdldF9GYXN0UGF0aEVuYWJsZWQAc2V0X0Zhc3RQYXRoRW5hYmxlZABnZXRfTnVtYmVyUmVj
b3Jkc0ZhaWxlZABzZXRfTnVtYmVyUmVjb3Jkc0ZhaWxlZABnZXRfTnVtYmVyQmF0Y2hlc0ZhaWxl
ZABzZXRfTnVtYmVyQmF0Y2hlc0ZhaWxlZABnZXRfTnVtYmVyUmVjb3Jkc1Byb2Nlc3NlZABzZXRf
TnVtYmVyUmVjb3Jkc1Byb2Nlc3NlZABnZXRfQ3JlYXRlZABzZXRfQ3JlYXRlZABnZXRfTnVtYmVy
QmF0Y2hlc0NvbXBsZXRlZABzZXRfTnVtYmVyQmF0Y2hlc0NvbXBsZXRlZABnZXRfTnVtYmVyQmF0
Y2hlc1F1ZXVlZABzZXRfTnVtYmVyQmF0Y2hlc1F1ZXVlZAA8QkdBX1RpcG9fZGVfRG9jdW1lbnRv
X19jPmtfX0JhY2tpbmdGaWVsZAA8QkdBX0RvY3VtZW50TnVtYmVyX19jPmtfX0JhY2tpbmdGaWVs
ZAA8SWQ+a19fQmFja2luZ0ZpZWxkADxKb2JJZD5rX19CYWNraW5nRmllbGQAPEFzc2lnbm1lbnRS
dWxlSWQ+a19fQmFja2luZ0ZpZWxkADxDbGllbnRJZD5rX19CYWNraW5nRmllbGQAPENyZWF0ZWRC
eUlkPmtfX0JhY2tpbmdGaWVsZAA8RmFzdFBhdGhFbmFibGVkPmtfX0JhY2tpbmdGaWVsZAA8TnVt
YmVyUmVjb3Jkc0ZhaWxlZD5rX19CYWNraW5nRmllbGQAPE51bWJlckJhdGNoZXNGYWlsZWQ+a19f
QmFja2luZ0ZpZWxkADxOdW1iZXJSZWNvcmRzUHJvY2Vzc2VkPmtfX0JhY2tpbmdGaWVsZAA8Q3Jl
YXRlZD5rX19CYWNraW5nRmllbGQAPE51bWJlckJhdGNoZXNDb21wbGV0ZWQ+a19fQmFja2luZ0Zp
ZWxkADxOdW1iZXJCYXRjaGVzUXVldWVkPmtfX0JhY2tpbmdGaWVsZAA8UGFzc3dvcmQ+a19fQmFj
a2luZ0ZpZWxkADxTdGF0dXNDb2RlPmtfX0JhY2tpbmdGaWVsZAA8Q29uY3VycmVuY3lNb2RlPmtf
X0JhY2tpbmdGaWVsZAA8TWVzc2FnZT5rX19CYWNraW5nRmllbGQAPFN0YXRlTWVzc2FnZT5rX19C
YWNraW5nRmllbGQAPEV4dGVybmFsSWRGaWVsZE5hbWU+a19fQmFja2luZ0ZpZWxkADxleHRlcm5h
bElkRmllbGROYW1lPmtfX0JhY2tpbmdGaWVsZAA8VXNlcm5hbWU+a19fQmFja2luZ0ZpZWxkADxB
cGlBY3RpdmVQcm9jZXNzaW5nVGltZT5rX19CYWNraW5nRmllbGQAPFRvdGFsUHJvY2Vzc2luZ1Rp
bWU+a19fQmFja2luZ0ZpZWxkADxBcGV4UHJvY2Vzc2luZ1RpbWU+a19fQmFja2luZ0ZpZWxkADxU
b2tlblR5cGU+a19fQmFja2luZ0ZpZWxkADxDb250ZW50VHlwZT5rX19CYWNraW5nRmllbGQAPFNp
Z25hdHVyZT5rX19CYWNraW5nRmllbGQAPENyZWF0ZWREYXRlPmtfX0JhY2tpbmdGaWVsZAA8U3Rh
dGU+a19fQmFja2luZ0ZpZWxkADxOdW1iZXJCYXRjaGVzVG90YWw+a19fQmFja2luZ0ZpZWxkADxJ
bnN0YW5jZVVybD5rX19CYWNraW5nRmllbGQAPEFjY2Vzc1Rva2VuPmtfX0JhY2tpbmdGaWVsZAA8
QXBpVmVyc2lvbj5rX19CYWNraW5nRmllbGQAPE9wZXJhdGlvbj5rX19CYWNraW5nRmllbGQAPFN5
c3RlbU1vZHN0YW1wPmtfX0JhY2tpbmdGaWVsZAA8RmllbGRzPmtfX0JhY2tpbmdGaWVsZAA8TnVt
YmVyUmV0cmllcz5rX19CYWNraW5nRmllbGQAPEVycm9ycz5rX19CYWNraW5nRmllbGQAPFN1Y2Nl
c3M+a19fQmFja2luZ0ZpZWxkADxOdW1iZXJCYXRjaGVzSW5Qcm9ncmVzcz5rX19CYWNraW5nRmll
bGQAPElzc3VlZEF0PmtfX0JhY2tpbmdGaWVsZAA8T2JqZWN0PmtfX0JhY2tpbmdGaWVsZAA8Q2xp
ZW50U2VjcmV0PmtfX0JhY2tpbmdGaWVsZABzZXRfTWV0aG9kAGdldF9QYXNzd29yZABzZXRfUGFz
c3dvcmQAZ2V0X1N0YWNrVHJhY2UAZGVmYXVsdEluc3RhbmNlAFJlc3RTYWxlc2ZvcmNlAGdldF9T
dGF0dXNDb2RlAHNldF9TdGF0dXNDb2RlAEh0dHBTdGF0dXNDb2RlAGdldF9Db25jdXJyZW5jeU1v
ZGUAc2V0X0NvbmN1cnJlbmN5TW9kZQBnZXRfTWVzc2FnZQBzZXRfTWVzc2FnZQBnZXRfU3RhdGVN
ZXNzYWdlAHNldF9TdGF0ZU1lc3NhZ2UAZ2V0X0Vycm9yTWVzc2FnZQBtZXNzYWdlAERhdGFUYWJs
ZQBWYXJpYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRs
ZQBMb2FkRmlsZQBnZXRfTmFtZQBnZXRfRXh0ZXJuYWxJZEZpZWxkTmFtZQBzZXRfRXh0ZXJuYWxJ
ZEZpZWxkTmFtZQBnZXRfZXh0ZXJuYWxJZEZpZWxkTmFtZQBzZXRfZXh0ZXJuYWxJZEZpZWxkTmFt
ZQBnZXRfVXNlcm5hbWUAc2V0X1VzZXJuYW1lAGdldF9BcGlBY3RpdmVQcm9jZXNzaW5nVGltZQBz
ZXRfQXBpQWN0aXZlUHJvY2Vzc2luZ1RpbWUAZ2V0X1RvdGFsUHJvY2Vzc2luZ1RpbWUAc2V0X1Rv
dGFsUHJvY2Vzc2luZ1RpbWUAZ2V0X0FwZXhQcm9jZXNzaW5nVGltZQBzZXRfQXBleFByb2Nlc3Np
bmdUaW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAV3JpdGVMaW5lAENvbWJpbmUA
U2VjdXJpdHlQcm90b2NvbFR5cGUAZ2V0X1Rva2VuVHlwZQBzZXRfVG9rZW5UeXBlAFBhcmFtZXRl
clR5cGUAZ2V0X0NvbnRlbnRUeXBlAHNldF9Db250ZW50VHlwZQBGYWlsdXJlAGdldF9TaWduYXR1
cmUAc2V0X1NpZ25hdHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUA
VlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFw
cGxpY2F0aW9uU2V0dGluZ3NCYXNlAElSZXN0UmVzcG9uc2UARGlzcG9zZQBnZXRfQ3JlYXRlZERh
dGUAc2V0X0NyZWF0ZWREYXRlAGdldF9TdGF0ZQBzZXRfU3RhdGUARWRpdG9yQnJvd3NhYmxlU3Rh
dGUAV3JpdGUAQ2xpZW50ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVz
ZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmli
dXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFy
Z2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3Nl
bWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUA
QXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNT
Y3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVu
dGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUASnNvblByb3BlcnR5QXR0cmlidXRlAEV4ZWN1dGUA
Z2V0X1ZhbHVlAEdldFNlbnNpdGl2ZVZhbHVlAHZhbHVlAHNldF9FeHBlY3QxMDBDb250aW51ZQBh
ZGRfQXNzZW1ibHlSZXNvbHZlAFN5c3RlbS5UaHJlYWRpbmcAU3lzdGVtLlJ1bnRpbWUuVmVyc2lv
bmluZwBUb1N0cmluZwBGb3JtYXR0aW5nAFJlc3BvbnNlUmVzdWx0YWRvQmF0Y2gAR2V0UmVzdWx0
YWRvQmF0Y2gAUmVzcG9uc2VFc3RhZG9CYXRjaABHZXRFc3RhZG9CYXRjaABSZXNwb25zZVBvc3RC
YXRjaABQYXRoAFVyaQBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNx
bFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBnZXRfTnVtYmVyQmF0Y2hlc1RvdGFsAHNldF9O
dW1iZXJCYXRjaGVzVG90YWwAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVs
AHBhdGhEbGwAU1RfNDE2YWVmYjUxMzk0NDBlM2JkZjAwNzc3OWJhYTdjZjUuZGxsAEZpbGwAc2V0
X1NlY3VyaXR5UHJvdG9jb2wAZ2V0X0luc3RhbmNlVXJsAHNldF9JbnN0YW5jZVVybABzZXRfQmFz
ZVVybABSZXN0VXJsAGluc3RhbmNlX3VybABnZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1h
bgBCb29sZWFuAGdldF9BY2Nlc3NUb2tlbgBzZXRfQWNjZXNzVG9rZW4AYWNjZXNzX3Rva2VuAFNj
cmlwdE1haW4AQXBwRG9tYWluAGdldF9DdXJyZW50RG9tYWluAFJlc3BvbnNlTG9naW4AbG9naW4A
Z2V0X0FwaVZlcnNpb24Ac2V0X0FwaVZlcnNpb24AZ2V0X09wZXJhdGlvbgBzZXRfT3BlcmF0aW9u
AFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0
aW9uAERhdGFSb3dDb2xsZWN0aW9uAFJlc3RDb25uZWN0aW9uAFdlYkV4Y2VwdGlvbgBnZXRfRXJy
b3JFeGNlcHRpb24AUmVzdEV4Y2VwdGlvbgBOZXd0b25zb2Z0Lkpzb24AQ3VsdHVyZUluZm8AU2xl
ZXAAZ2V0X1N5c3RlbU1vZHN0YW1wAHNldF9TeXN0ZW1Nb2RzdGFtcABSZXN0U2hhcnAAQWRkSGVh
ZGVyAHNlbmRlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAFNlcnZpY2VQb2ludE1hbmFnZXIAUmVzb2x2
ZUV2ZW50SGFuZGxlcgBpbm5lcgBFdmVudHNPYmplY3RXcmFwcGVyAFJlc3RVc2VyAEFkZFBhcmFt
ZXRlcgBTdHJlYW1Xcml0ZXIAVGV4dFdyaXRlcgBPbGVEYkRhdGFBZGFwdGVyAEZpcmVFcnJvcgBJ
RW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3RvcgBsaXN0YUN1ZW50YXMAU3lzdGVt
LkRpYWdub3N0aWNzAGdldF9GaWVsZHMAc2V0X0ZpZWxkcwBTeXN0ZW0uUnVudGltZS5Db21waWxl
clNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfNDE2YWVmYjUxMzk0NDBlM2JkZjAwNzc3OWJh
YTdjZjUuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAFNUXzQxNmFlZmI1MTM5NDQwZTNi
ZGYwMDc3NzliYWE3Y2Y1LkVudGlkYWRlcwBEZWJ1Z2dpbmdNb2RlcwBnZXRfTnVtYmVyUmV0cmll
cwBzZXRfTnVtYmVyUmV0cmllcwBTVF80MTZhZWZiNTEzOTQ0MGUzYmRmMDA3Nzc5YmFhN2NmNS5Q
cm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMAU2V0dGluZ3MAUmVzb2x2ZUV2ZW50QXJncwBhcmdzAENv
bnRhaW5zAFN5c3RlbS5Db2xsZWN0aW9ucwBnZXRfRXJyb3JzAHNldF9FcnJvcnMAUmVzdFBhc3MA
Z2V0X1N1Y2Nlc3MAc2V0X1N1Y2Nlc3MAZ2V0X051bWJlckJhdGNoZXNJblByb2dyZXNzAHNldF9O
dW1iZXJCYXRjaGVzSW5Qcm9ncmVzcwBnZXRfRHRzAFNjcmlwdFJlc3VsdHMAZ2V0X0V2ZW50cwBn
ZXRfUm93cwBnZXRfSXNzdWVkQXQAc2V0X0lzc3VlZEF0AENvbmNhdABnZXRfT2JqZWN0AHNldF9P
YmplY3QAU2VyaWFsaXplT2JqZWN0AERlc2VyaWFsaXplT2JqZWN0AENvbmV4aW9uR2V0AFN5c3Rl
bS5OZXQAZ2V0X0NsaWVudFNlY3JldABzZXRfQ2xpZW50U2VjcmV0AGdldF9EZWZhdWx0AHNldF9U
YXNrUmVzdWx0AFJlc3RDbGllbnQAZ2V0X0N1cnJlbnQAZ2V0X0NvbnRlbnQAZ2V0X0NvdW50AEFj
Y291bnQASnNvbkNvbnZlcnQASVJlc3RSZXF1ZXN0AHJlcXVlc3QAQ29uZXhpb25Qb3N0AE1vdmVO
ZXh0AERhdGFSb3cAZ2V0X0l0ZW1BcnJheQBnZXRfQXNzZW1ibHkAb3BfRXF1YWxpdHkASXNOdWxs
T3JFbXB0eQAAAABrLwBzAGUAcgB2AGkAYwBlAHMALwBvAGEAdQB0AGgAMgAvAHQAbwBrAGUAbgA/
AGcAcgBhAG4AdABfAHQAeQBwAGUAPQBwAGEAcwBzAHcAbwByAGQAJgBjAGwAaQBlAG4AdABfAGkA
ZAA9AAAfJgBjAGwAaQBlAG4AdABfAHMAZQBjAHIAZQB0AD0AABUmAHUAcwBlAHIAbgBhAG0AZQA9
AAAVJgBwAGEAcwBzAHcAbwByAGQAPQAAMS8AcwBlAHIAdgBpAGMAZQBzAC8AYQBzAHkAbgBjAC8A
NQAzAC4AMAAvAGoAbwBiAAAZQwBvAG4AdABlAG4AdAAtAHQAeQBwAGUAASFhAHAAcABsAGkAYwBh
AHQAaQBvAG4ALwBqAHMAbwBuAAAdWAAtAFMARgBEAEMALQBTAGUAcwBzAGkAbwBuAAEPQgBlAGEA
cgBlAHIAIAAAMy8AcwBlAHIAdgBpAGMAZQBzAC8AYQBzAHkAbgBjAC8ANQAzAC4AMAAvAGoAbwBi
AC8AAA0vAGIAYQB0AGMAaAAADy8AYgBhAHQAYwBoAC8AAA8vAHIAZQBzAHUAbAB0AAAlJABQAHIA
bwBqAGUAYwB0ADoAOgBQAEEAVABIAF8ARABMAEwAAB1DADoAXABFAFQATABcAGwAbwBnAC4AbABv
AGcAAC0kAFAAcgBvAGoAZQBjAHQAOgA6AFMARgBfAEMATABJAEUATgBUAF8ASQBEAAA1JABQAHIA
bwBqAGUAYwB0ADoAOgBTAEYAXwBDAEwASQBFAE4AVABfAFMARQBDAFIARQBUAAArJABQAHIAbwBq
AGUAYwB0ADoAOgBTAEYAXwBVAFMARQBSAE4AQQBNAEUAACskAFAAcgBvAGoAZQBjAHQAOgA6AFMA
RgBfAFAAQQBTAFMAVwBPAFIARAAAISQAUAByAG8AagBlAGMAdAA6ADoAUwBGAF8AVQBSAEwAACdT
AGMAcgBpAHAAdAAgAFQAYQBzAGsAIABFAHgAYQBtAHAAbABlAAADDQAADXUAcABzAGUAcgB0AAAP
QQBjAGMAbwB1AG4AdAAAK0IARwBBAF8ARABvAGMAdQBtAGUAbgB0AE4AdQBtAGIAZQByAF8AXwBj
AAAJSgBTAE8ATgAAG1UAcwBlAHIAOgA6AEwAaQBzAHQAYQBTAFAAACFDADoAXABFAFQATABcAHQA
dQBwAGwAYQAuAHQAeAB0AAARcABhAHMAZQAgADEALgAuAAADLAAAFUIAYQB0AGMAaAAgAEkARAA6
ACAAAA1DAGwAbwBzAGUAZAAADUYAYQBpAGwAZQBkAAAbTgBvAHQAIABQAHIAbwBjAGUAcwBzAGUA
ZAAAL0UAcgByAG8AcgAgAGEAbAAgAHAAcgBvAGMAZQBzAGEAcgAgAGIAYQB0AGMAaAAAE0MAbwBt
AHAAbABlAHQAZQBkAAAhQwA6AFwARQBUAEwAXABSAGUAcwB1AGwALgB0AHgAdAAAFUkAZAAgACAA
IAAgACAAIAA6ACAAABVTAHUAYwBjAGUAcwBzACAAOgAgAAAVQwByAGUAYQB0AGUAZAAgADoAIAAA
FUUAcgByAG8AcgAgACAAIAA6ACAAAA0tAC0ALQAtAC0ALQABE1IAZQBzAHQAUwBoAGEAcgBwAAAb
UgBlAHMAdABTAGgAYQByAHAALgBkAGwAbAAAH04AZQB3AHQAbwBuAHMAbwBmAHQALgBKAHMAbwBu
AAAnTgBlAHcAdABvAG4AcwBvAGYAdAAuAEoAcwBvAG4ALgBkAGwAbAAAcVMAVABfADQAMQA2AGEA
ZQBmAGIANQAxADMAOQA0ADQAMABlADMAYgBkAGYAMAAwADcANwA3ADkAYgBhAGEANwBjAGYANQAu
AFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAAAAIjQ+FqrVWkyDKn2k
wkOZnwAEIAEBCAMgAAEFIAEBEREEIAEBDgYgAQERgIkHBwMSQQ4SRQQAAQECBgABARGAnQYgAQER
gKEHIAESQRKApQUgABGAqQMgAA4EIAASRQYgAgEOEkUEBwESMAYgAQESgK0FAAEOHQ4GEAEBHgAO
BAoBEjAFBwIOEkAHIAISgKUODgUAAg4ODgcAAg4cEYC5CiADEoClDhwRgL0ECgESQAUHAg4SNAYA
Aw4ODg4ECgESNAgHARUSUQESOAgKARUSUQESOAQHARIsBwAEDg4ODg4ECgESLAQHARJdBSAAEoDB
BSAAEoDFBiABEoDJHAMgABwFAAASgM0FIAIBHBgGIAEBEoDRBhUSUQESIAMgAAgHBwMOEjASRQUg
ABKA2QIGDgggBQIIDg4OCAoHBBIQEigSMBJAFAcJEhASIBIwEmESXRI0EmUdHBJpBiACCBJhHAUg
ABKA4QQgABJlBCAAHRwEAAEOHAQAAQIOBSABARMAAyAAAggHAxIQEiQSMAcHAxIQEjAOBAABAQgF
AAICDg4XBwcSEBIwFRJRARI4El0VEW0BEjgSOAIGFRJRARI4CCAAFRFtARMABhURbQESOAQgABMA
BCABAg4FAAEScQ4IAAESgP0RgQEEIAAScQYgAgEOEnEIt3pcVhk04IkIiYRdzYCAzJEIMK1P5rKm
ru0EAAAAAAQBAAAAAwYSOQMGEj0HBhUSUQESIAQGEoCBBAYSgIUDBhIcAgYKAgYcAgYCBAYdEjwD
Bh0OAgYIAwYRRAUgARIwDgggAhJAEigSMAkgAxJAEiQSMA4NIAMSNBUSUQESIBIwDgwgAxUSUQES
OBIwDg4IIAMSLBIwDg4JIAEBFRJRARIgByACEnEcEnUFAAASgIEFAAASgIUGAAEBEoCFBAAAEhwD
AAABAyAACgQgAQEKBCABARwEIAEBAgUgAB0SPAYgAQEdEjwEIAAdDgUgAQEdDgMoAA4FCAASgIEF
CAASgIUECAASHAMoAAoDKAAcAygAAgUoAB0SPAQoAB0OCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9u
RXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF80MTZhZWZiNTEzOTQ0MGUzYmRmMDA3Nzc5
YmFhN2NmNQAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDIyAABJAQAaLk5FVEZyYW1ld29yayxW
ZXJzaW9uPXY0LjcBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNxoB
ABVCR0FfRG9jdW1lbnROdW1iZXJfX2MAAB0BABhCR0FfVGlwb19kZV9Eb2N1bWVudG9fX2MAAAoB
AAVzdGF0ZQAADgEACW9wZXJhdGlvbgAACwEABm9iamVjdAAAGAEAE2V4dGVybmFsSWRGaWVsZE5h
bWUAABABAAtjb250ZW50VHlwZQAAFwEAEmFwZXhQcm9jZXNzaW5nVGltZQAAHAEAF2FwaUFjdGl2
ZVByb2Nlc3NpbmdUaW1lAAAQAQALY3JlYXRlZERhdGUAAAcBAAJpZAAACgEABWpvYklkAAAYAQAT
bnVtYmVyUmVjb3Jkc0ZhaWxlZAAAGwEAFm51bWJlclJlY29yZHNQcm9jZXNzZWQAABEBAAxzdGF0
ZU1lc3NhZ2UAABMBAA5zeXN0ZW1Nb2RzdGFtcAAAGAEAE3RvdGFsUHJvY2Vzc2luZ1RpbWUAABEB
AAxhY2Nlc3NfdG9rZW4AABEBAAxpbnN0YW5jZV91cmwAAA8BAAp0b2tlbl90eXBlAAAOAQAJaXNz
dWVkX2F0AAAOAQAJc2lnbmF0dXJlAAAMAQAHc3VjY2VzcwAADAEAB2NyZWF0ZWQAAAsBAAZlcnJv
cnMAAA8BAApzdGF0dXNDb2RlAAAMAQAHbWVzc2FnZQAACwEABmZpZWxkcwAADwEACmFwaVZlcnNp
b24AABUBABBhc3NpZ25tZW50UnVsZUlkAAAUAQAPY29uY3VycmVuY3lNb2RlAAAQAQALY3JlYXRl
ZEJ5SWQAABQBAA9mYXN0UGF0aEVuYWJsZWQAABsBABZudW1iZXJCYXRjaGVzQ29tcGxldGVkAAAY
AQATbnVtYmVyQmF0Y2hlc0ZhaWxlZAAAHAEAF251bWJlckJhdGNoZXNJblByb2dyZXNzAAAYAQAT
bnVtYmVyQmF0Y2hlc1F1ZXVlZAAAFwEAEm51bWJlckJhdGNoZXNUb3RhbAAAEgEADW51bWJlclJl
dHJpZXMAAAAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRl
ciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlU
b2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0
AgAAAAAAAAAAAAAAUEFEUEFEULQAAACkdgAAAAAAAAAAAAC+dgAAACAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAsHYAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAw
AACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWIAAABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYA
RQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQAWeNEfAAABABZ40R8/AAAAAAAA
AAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQA
AABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABl
AEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMA
AAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBE
AGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADQAMQA2AGEAZQBmAGIANQAxADMAOQA0ADQA
MABlADMAYgBkAGYAMAAwADcANwA3ADkAYgBhAGEANwBjAGYANQAAAD4ADwABAEYAaQBsAGUAVgBl
AHIAcwBpAG8AbgAAAAAAMQAuADAALgA4ADEANAA1AC4AMwAwADcANAAyAAAAAABwACgAAQBJAG4A
dABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADQAMQA2AGEAZQBmAGIANQAxADMAOQA0ADQAMABl
ADMAYgBkAGYAMAAwADcANwA3ADkAYgBhAGEANwBjAGYANQAuAGQAbABsAAAASAASAAEATABlAGcA
YQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMgAy
AAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIA
aQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8ANAAxADYAYQBlAGYAYgA1ADEAMwA5
ADQANAAwAGUAMwBiAGQAZgAwADAANwA3ADcAOQBiAGEAYQA3AGMAZgA1AC4AZABsAGwAAABoACQA
AQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfADQAMQA2AGEAZQBmAGIANQAxADMAOQA0
ADQAMABlADMAYgBkAGYAMAAwADcANwA3ADkAYgBhAGEANwBjAGYANQAAAEIADwABAFAAcgBvAGQA
dQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AOAAxADQANQAuADMAMAA3ADQAMgAAAAAARgAP
AAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AOAAxADQANQAuADMA
MAA3ADQAMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAHAAAAwAAADQNgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{2F32E19C-7DE7-4773-8BFE-2428A5905643}"
      DTS:From="Package\s_extract_data"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\s_script_SalesForce" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="215,42"
          Id="Package\s_script_SalesForce\ApiBulk_Sqlesforce_template"
          TopLeft="42,26" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="296,147"
          Size="296,190"
          Id="Package\s_script_SalesForce"
          TopLeft="672,84" />
        <NodeLayout
          Size="164,42"
          Id="Package\s_extract_data\sql_extract_Topaz"
          TopLeft="76,23" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="337,137"
          Size="337,180"
          Id="Package\s_extract_data"
          TopLeft="152,87" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="489,178">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="183,0"
              Start="0,0"
              End="175.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="175.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>